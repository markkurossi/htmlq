Program = { TopLevelClause, ';'};

TopLevelClause = ( VariableDecl
	         | VariableInit
		 | PrintStmt
		 | SelectClause );


VariableDecl = 'DECLARE', Identifier, Type;
VariableInit = 'SET', Identifier, '=', Expr;

PrintStmt = 'PRINT', Expr;

SelectClause = Select,
	       [ Into ],
	       [ From ],
	       [ Where ],
	       [ Group ];

Select = 'SELECT', SelectColumns;
SelectColumns = SelectColumn, {',', SelectColumn};
SelectColumn = Expr, [ AsClause ];

Into  = 'INTO', Identifier;
From  = 'FROM', FromClause, { ',', FromClause };
Where = 'WHERE', Expr;
Group = 'GROUP', 'BY', Expr, {',', Expr};

FromClause = (String, [ 'FILTER', String ] | '(', SelectClause, ')'),
	     'AS', Identifier;

Expr = LogicalAndExpr, {'OR', LogicalAndExpr};

LogicalAndExpr = LogicalNotExpr, {'AND', LogicalNotExpr};

LogicalNotExpr = ['NOT'], ComparativeExpr;

ComparativeExpr = AdditiveExpr,
		  {('=' | '<>' | '<' | '<=' | '>' | '>='), AdditiveExpr};

AdditiveExpr = MultiplicativeExpr, {('+' | '-'), MultiplicativeExpr};

MultiplicativeExpr = UnaryExpr, {('*' | '/'), UnaryExpr};

UnaryExpr = PostfixExpr;

PostfixExpr = '(', Expr, ')'
	    | SimpleReference
	    | QualifiedReference
	    | FunctionCall
	    | Case
	    | Cast
	    | Bool
	    | integer
	    | real
	    | String
	    ;

SimpleReference = Identifier;
QualifiedReference = Identifier, '.', Identifier;

FunctionCall = Identifier, '(', {Arguments}, ')';
Arguments = Expr, {',', Expr};

Case = 'CASE', [ Expr ], Branch, { Branch }, [ 'ELSE', Expr ], 'END';
Branch =  'WHEN', Expr, 'THEN', Expr;

Cast = 'CAST', '(', Expr, 'AS', Type, ')';

AsClause = 'AS', Identifier;

Bool = 'TRUE' | 'FALSE';

Identifier = ucLetter, {ucLetter|ucDigit|'_'|'$'} | '"', characters, '"';

String = "'", characters, "'";

Type = 'BOOLEAN' | 'INTEGER' | 'REAL' | 'VARCHAR';
